// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A DTMF audio decoder AI agent.
 *
 * - decodeDtmfAudio - A function that handles the DTMF audio decoding process.
 * - DecodeDtmfAudioInput - The input type for the decodeDtmfAudio function.
 * - DecodeDtmfAudioOutput - The return type for the decodeDtmfAudio function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DecodeDtmfAudioInputSchema = z.object({
  audioDataUri: z
    .string()
    .describe(
      "An audio recording of DTMF tones, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type DecodeDtmfAudioInput = z.infer<typeof DecodeDtmfAudioInputSchema>;

const DecodeDtmfAudioOutputSchema = z.object({
  decodedText: z
    .string()
    .describe('The text decoded from the DTMF audio, if successful.'),
  success: z.boolean().describe('Whether the decoding was successful or not.'),
});
export type DecodeDtmfAudioOutput = z.infer<typeof DecodeDtmfAudioOutputSchema>;

export async function decodeDtmfAudio(input: DecodeDtmfAudioInput): Promise<DecodeDtmfAudioOutput> {
  return decodeDtmfAudioFlow(input);
}

const prompt = ai.definePrompt({
  name: 'decodeDtmfAudioPrompt',
  input: {schema: DecodeDtmfAudioInputSchema},
  output: {schema: DecodeDtmfAudioOutputSchema},
  prompt: `You are an expert in decoding DTMF (Dual-Tone Multi-Frequency) audio signals into text.

You will receive an audio recording of DTMF tones. Your task is to analyze the audio and convert the DTMF tones into a readable text message. Each tone should be interpreted as a character.

- Analyze the provided audio signal to identify the sequence of DTMF tones.
- Convert the identified tones into their corresponding text characters.
- If the audio does not contain recognizable DTMF tones or is silent, you must indicate that the decoding was unsuccessful.

Here is the audio data: {{media url=audioDataUri}}

Please return the decoded text and a boolean indicating whether the decoding was successful.
`,
});

const decodeDtmfAudioFlow = ai.defineFlow(
  {
    name: 'decodeDtmfAudioFlow',
    inputSchema: DecodeDtmfAudioInputSchema,
    outputSchema: DecodeDtmfAudioOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
